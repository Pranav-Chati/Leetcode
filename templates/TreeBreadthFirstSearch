public class TreeBreadthFirstSearch {
    /*
     * problem: Binary Tree Level Order Traversa
     * Given a binary tree, populate an array to represent its level-by-level
     * traversal. You should populate the values of all nodes of each level from
     * left to right in separate sub-arrays.
     */
    public static List<List<Integer>> traverseBinaryTree(TreeNode root) {}

    /*
     * problem: Reverse Level Order Traversal
     * Given a binary tree, populate an array to represent its level-by-level
     * traversal in reverse order, i.e., the lowest level comes first. You should
     * populate the values of all nodes in each level from left to right in separate
     * sub-arrays.
     */
    public static List<List<Integer>> reverseTraverseBinaryTree(TreeNode root) {}

    /*
     * problem: Zigzag Traversal
     * Given a binary tree, populate an array to represent its zigzag level order
     * traversal. You should populate the values of all nodes of the first level
     * from left to right, then right to left for the next level and keep
     * alternating in the same manner for the following levels.
     */
    public static List<List<Integer>> zigzagTraversal(TreeNode root) {}

    /*
     * problem: Level Averages in a Binary Tree
     * Given a binary tree, populate an array to represent the averages of all of
     * its levels.
     */
    public static List<Double> findLevelAverages(TreeNode root) {}

    /*
     * problem: Minimum Depth of a Binary Tree
     * Find the minimum depth of a binary tree. The minimum depth is the number of
     * nodes along the shortest path from the root node to the nearest leaf node.
     */
    public static int minDepthOfBinaryTree(TreeNode root) {}

    /*
     * problem: Level Order Successor
     * Given a binary tree and a node, find the level order successor of the given
     * node in the tree. The level order successor is the node that appears right
     * after the given node in the level order traversal.
     */
    public static TreeNode findLevelOrderSuccessor(TreeNode root, int key) {}
}
